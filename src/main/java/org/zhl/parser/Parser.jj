// 保留字
TOKEN : {
    <VOID : "void"> |
    <CHAR : "char">  |
    <SHORT : "short">|
    <INT: "int"> |
    <LONG: "long">|
    <STRUCT: "struct">|
    <UNION: "union">|
    <ENUM: "enum">|
    <STATIC: "static">|
    <EXTERN: "extern">|
    <CONST: "const">|
    <SIGNED: "signed">|
    <UNSIGNED: "unsigned">|
    <IF: "if">|
    <ELSE: "else">|
    <SWITCH: "switch">|
    <CASE: "case">|
    <DEFAULT_: "default">|
    <WHILE: "while">|
    <DO: "do">|
    <FOR: "for">|
    <RETURN: "return">|
    <BREAK: "break">|
    <CONTINUE: "continue">|
    <GOTO: "goto">|
    <TYPEDEF: "typedef">|
    <IMPORT: "import">|
    <SIZEOF : "sizeof">
}

// 标识符
TOKEN : {
    <IDENTIFER: ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","_","0"-"9"])*>
}

//数值类型
TOKEN : {
    <INTEGER: ["1"-"9"](["1"-"9"])*("U")?("L")? |
      "0"["x","X"](["0"-"9","a"-"f","A"-"F"])+("U")?("L")?|
      "0"(["0"-"7"])*("U")?("L")?
     >
}

//空白符
SPECIAL_TOKEN : {
    <SPACES: ([" ","\t","\n","\r","\f"])+>
}

//行注释
SPECIAL_TOKEN : {
    <LINE_COMMENT: "//" (~["\n","\r"])* ("\n" | "\r\n" | "\r")?>
}


// 块注释
MORE : {
    <"/*"> : IN_BLOCK_COMMENT
}
<IN_BLOCK_COMMENT> MORE : {
    <~[]>
}
<IN_BLOCK_COMMENT> SKIP : {
    <"*/"> :DEFAULT
}

// 字符串字面量
MORE : {
    <"\"">:IN_STRING
}
<IN_STRING> MORE : {
    <(~["\"","\\","\n","\r"])+> |
    <"\\"(["0"-"7"]){3}> |
    <"\\"~[]>
}

<IN_STRING> TOKEN : {
    <STRING: "\""> :DEFAULT
}

//字符字面量
MORE : {
    <"'"> : IN_CHARACTER
}
<IN_CHARACTER> MORE : {
    <(~["'","\\","\n","\r"])+> |
        <"\\"(["0"-"7"]){3}> |
        <"\\"~[]>
}
<IN_CHARACTER> TOKEN : {
    <CHARACTER: "'"> : DEFAULT
}



// import的语法
void import_stmts():{}
{
    (import_stmt())*
}

void import_stmt():{}
{
    <IMPORT> name() ("." name())* ";"
}

void name():{}
{
    <IDENTIFER>
}

// 各类定义的语法
void top_defs():{}
{
    (
        (LOOKAHEAD(stoage() typeref() <IDENTIFER> "(")) defun() |
        LOOKAHEAD(3) defvars() |
        defconst() |
        defstruct() |
        defunion() |
        typedef()
    )*
}

void stoage():{}
{
    [<STATIC> ]
}

//变量定义语法
void defvars():{}
{
    stoage() type() name() ["=" expr()] ("," name() ["=" expr()])* ";"
}

// 函数定义的语法
void defun():{}
{
    stoage() typedef() name() "(" params() ")" block()
}

void params():{}
{
    LOOKAHEAD(<VOID> ")") <VOID> |
    fixedparams() ["," "..."]
}

void fixedparams():{}
{
    param() (LOOKAHEAD(2) "," param())*
}

void param():{}
{
    type() name()
}

void block():{}
{
    "{" defvar_list() stmts() "}"
}

// 结构体和联合体的语法
void defstruct():{}
{
    <STRUCT> name() member_list() ";"
    {
        System.out.println("发现了结构体！");
    }
}

void defunion():{}
{
    <UNION> name() member_list() ";"
}

void member_list():{}
{
    "{" (slot() ";")* "}"
}

void slot():{}
{
    type() name()
}

// 类型的语法
void typedef():{}
{
    <TYPEDEF> typeref() <IDENTIFER> ";"
}

void type():{}
{
    typeref()
}

void typeref():{}
{
    typedef_base()
    (LOOKAHEAD(2) "[" "]"  |
        "[" <INTEGER> "]" |
        "*" |
        "(" param_typerefs() ")"
    )*
}

void typedef_base():{}
{
    <VOID> |
    <CHAR> |
    <SHORT> |
    <INT> |
    <LONG> |
    LOOKAHEAD(2) <UNSIGNED> <CHAR> |
    LOOKAHEAD(2) <UNSIGNED> <SHORT> |
    LOOKAHEAD(2) <UNSIGNED> <INT> |
    <UNSIGNED> <LONG> |
    <STRUCT> <IDENTIFER> |
    <UNION> <IDENTIFER> |
    LOOKAHEAD({isType(getToken(1).image)}) <IDENTIFER>
}

// 语句的语法
void stmts():{}
{
    (stmt())*
}

void stmt():{}
{
    (
        ";" |
        LOOKAHEAD(2) labeed_stmt() |
        expr() ";"|
        block() |
        if_stmt() |
        while_stmt()|
        dowhile_stmt() |
        for_stmt()|
        switch_stmt()|
        break_stmt()|
        continue_stmt()|
        goto_stmt()|
        return_stmt()
    )
}

void if_stmt():{}
{
    <IF> "(" expr() ")" stmt() [LOOKAHEAD(1) <ELSE> stmt()]
}

void while_stmt():{}
{
    <WHILE> "(" expr() ")" stmt()
}

void for_stmt():{}
{
    <FOR> "(" [expr()] ";" [expr()] ";" [expr()] ")" stmt()
}

void break_stmt():{}
{
    <BREAK> ";"
}
void return_stmt():{}
{
    LOOKAHEAD(2) <RETURN> ";" |
    <RETURN> expr() ";"
}

// 表达式
void expr():{}
{
    LOOKAHEAD(term() "=") term() "=" expr() |
    LOOKAHEAD(term() opassign_op()) term() opassign_op() expr() |
    expr10()
}

void opassign_op():{}
{
    (
        "+="|
        "-="|
        "*="|
        "/="|
        "%="|
        "&="|
        "|="|
        "^="|
        "<<="|
        ">>="
    )
}

void expr10():{}
{
    expr9() ["?" expr() ":" expr10() ]
}

void expr9():{}
{
    expr8() ("||" expr8())*
}

void expr8():{}
{
    expr7() ("&&" expr7())*
}

void expr7():{}
{
    expr6() (
        ">" expr6() |
        "<" expr6() |
        ">=" expr6() |
        "<=" expr6() |
        "==" expr6() |
        "!=" expr6()
    )*
}

void expr6():{}
{
    expr5() ("|" expr5() )*
}

void expr5():{}
{
    expr4() ("^" expr4() )*
}

void expr4():{}
{
    expr3() ("&" expr3())*
}

void expr3():{}
{
    expr2() (
      ">>" expr2()|
      "<<" expr2()
    )*
}

void expr2():{}
{
    expr1() (
        "+" expr1() |
        "-" expr1()
    )*
}

void expr1():{}
{
   term() (
    "*" term()|
    "/" term()|
    "%" term()
   )*
}

void term():{}
{
    LOOKAHEAD("(" type()) "(" type() ")" term() |
    unary()
}

void unary():{}
{
   "++" unary() |
   "--" unary() |
   "+" term()  |
   "-" term()  |
   "!" term() |
   "~" term() |
   "*" term() |
   "&" term() |
   LOOKAHEAD(3) <SIZEOF> "(" type() ")" |
   <SIZEOF> unary() |
   postfix()
}

void postfix():{}
{
    primary() (
        "++"|
        "--"|
        "[" expr() "]"|
        "." name() |
        "->" name() |
        "(" args() ")"
    )*
}

void args():{}
{
    [expr() ("," expr())*]
}

void primary():{}
{
    <INTEGER> |
    <CHARACTER> |
    <STRING> |
    <IDENTIFER> |
    "(" expr() ")"
}










